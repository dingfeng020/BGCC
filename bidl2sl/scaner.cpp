#include <string.h>

#ifdef _WIN32
#pragma warning(disable:4996 4102)
#endif
#line 2 "scaner.c"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>

#ifndef _WIN32
#include <unistd.h>
#endif


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 199
#define YY_END_OF_BUFFER 200
static yyconst short int yy_acclist[1035] =
    {   0,
        1,    1,  200,  198,  199,    1,  198,  199,    1,  199,
      198,  199,  198,  199,  189,  198,  199,  190,  198,  199,
      198,  199,  184,  198,  199,  198,  199,  194,  195,  198,
      199,  182,  198,  199,  183,  198,  199,  186,  198,  199,
      181,  198,  199,  185,  198,  199,  193,  198,  199,  193,
      198,  199,  193,  198,  199,  193,  198,  199,  193,  198,
      199,  191,  198,  199,  192,  198,  199,  193,  198,  199,
      193,  198,  199,  193,  198,  199,  193,  198,  199,  193,
      198,  199,  193,  198,  199,  193,  198,  199,  193,  198,
      199,  193,  198,  199,  193,  198,  199,  193,  198,  199,

      193,  198,  199,  193,  198,  199,  193,  198,  199,  193,
      198,  199,  193,  198,  199,  193,  198,  199,  193,  198,
      199,  193,  198,  199,  193,  198,  199,  193,  198,  199,
      193,  198,  199,  193,  198,  199,  187,  198,  199,  188,
      198,  199,    1,  197,  196,  194,  195,    4,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,   18,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,   46,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,   76,  193,  193,  177,  193,
       83,  193,  193,  193,  193,  193,  193,  193,  193,  193,

      193,  193,  193,  193,  100,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,    4,  195,  195,  193,   54,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  179,
      193,   15,  193,  193,   19,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
       38,  193,  193,   42,  193,   44,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,   70,  193,  193,  193,  193,  193,  193,  193,  193,

      193,   81,  193,  193,  193,  193,  165,  193,  193,  193,
      193,  193,   90,  193,  193,   92,  193,  193,   94,  193,
      193,  193,  193,  193,  178,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      166,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  137,  193,  193,  193,
      193,  193,  193,  193,  145,  193,  193,  147,  193,  193,
      193,  193,  193,  193,  193,  193,  154,  193,  193,    2,
        3,  193,  193,  172,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,   17,  193,  193,   21,  193,

      193,  193,  193,   25,  157,  193,  193,   27,  158,  193,
       28,  193,  193,   30,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,   50,  193,   51,  193,
      193,  193,  193,  193,  193,  193,  193,  168,  193,  193,
       63,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,   75,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  158,  193,  193,   84,  193,  193,   86,  193,
      193,  193,  193,  193,   91,  193,  193,  193,   96,  193,
      193,  193,  193,  193,  103,  193,  193,  193,  193,  193,
      193,  110,  193,  193,  193,  193,  193,  193,  193,  119,

      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  131,  193,  132,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  180,  193,  193,
      193,  151,  193,  193,  153,  193,  193,  193,    3,    2,
        3,   22,  193,  173,  193,  193,  193,  193,  193,  193,
      193,  193,   12,  193,  193,  193,  193,  193,  193,   24,
      193,  193,   26,  193,   29,  193,  193,  193,  170,  193,
       33,  193,   34,  193,  176,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,   53,  193,  193,  193,   58,
      193,  193,  193,  193,  193,  193,  193,  193,  193,   68,

      193,  162,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  159,  193,  160,  193,  161,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  101,
      193,  193,  104,  193,  193,  193,  193,  193,  109,  193,
      193,  193,  193,  193,  193,  117,  193,  193,  193,  120,
      193,  193,  193,  193,  193,  193,  193,  127,  193,  193,
      193,  193,  193,  134,  193,  193,  193,  193,  193,  140,
      193,  141,  193,  193,  193,  144,  193,  146,  193,  193,
      193,  193,  152,  193,  193,  156,  193,    3,  193,  193,
      193,  193,  193,  193,  193,  193,  193,   16,  193,   20,

      193,  164,  193,   23,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,   45,  193,   47,  193,  193,
       52,  193,  193,   56,  193,  193,  193,   61,  193,   62,
      193,  193,   65,  193,  193,   67,  193,  193,  193,   72,
      193,  193,   74,  193,  193,   78,  193,  193,   79,  193,
      193,  193,   85,  193,   87,  193,  193,  193,   89,  193,
      193,   95,  193,  193,  193,  193,  193,  193,  193,  193,
      108,  193,  193,  193,  193,  193,  116,  193,  118,  193,
      193,  121,  193,  122,  193,  123,  193,  193,  163,  193,
      169,  193,  128,  193,  193,  193,  193,  135,  193,  193,

      193,  138,  193,  193,  142,  193,  193,  193,  193,  193,
      155,  193,  193,    6,  193,  193,  193,  193,  193,  193,
       13,  193,   14,  193,  157,  193,  193,  193,  193,  193,
      193,  193,   40,  193,  193,   43,  193,   48,  193,  193,
      193,  193,  193,  193,   66,  193,   69,  193,   71,  193,
      193,  193,  174,  193,  193,  193,   88,  193,  193,  193,
      193,  193,  193,  102,  193,  105,  193,  193,  193,  193,
      193,  113,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  175,  193,  193,  193,  148,  193,  193,  150,  193,
      193,    7,  193,    8,  193,  193,  193,   11,  193,   31,

      193,   32,  193,  193,  193,   37,  193,   39,  193,   41,
      193,  193,  193,  193,  193,   60,  193,   64,  193,   73,
      193,  193,  193,  193,  193,   93,  193,   97,   98,  193,
       99,  193,  193,  107,  193,  111,  193,  193,  193,  115,
      193,  167,  193,  193,  193,  126,  193,  193,  130,  193,
      193,  193,  139,  193,  143,  193,  149,  193,    5,  193,
      193,  193,  193,   36,  193,  193,  193,  193,   59,  193,
      193,  193,   82,  193,  171,  193,  106,  193,  193,  193,
      193,  193,  193,  193,  136,  193,    9,  193,  193,   35,
      193,  193,   55,  193,   57,  193,   77,  193,   80,  193,

      193,  193,  193,  193,  193,  193,  193,  193,  193,  114,
      193,  193,  125,  193,  193,  193,  193,   49,  193,  193,
      193,  129,  193,  133,  193,   10,  193,  193,  124,  193,
      193,  193,  112,  193
    } ;

static yyconst short int yy_accept[779] =
    {   0,
        1,    2,    3,    4,    6,    9,   11,   13,   15,   18,
       21,   23,   26,   28,   32,   35,   38,   41,   44,   47,
       50,   53,   56,   59,   62,   65,   68,   71,   74,   77,
       80,   83,   86,   89,   92,   95,   98,  101,  104,  107,
      110,  113,  116,  119,  122,  125,  128,  131,  134,  137,
      140,  143,  144,  144,  145,  146,  146,  148,  148,  149,
      149,  149,  150,  151,  152,  153,  154,  155,  156,  157,
      158,  159,  161,  162,  163,  164,  165,  166,  167,  168,
      169,  170,  171,  172,  174,  175,  176,  177,  178,  179,
      180,  181,  182,  183,  184,  185,  186,  188,  189,  191,

      193,  194,  195,  196,  197,  198,  199,  200,  201,  202,
      203,  204,  205,  207,  208,  209,  210,  211,  212,  213,
      214,  215,  216,  217,  218,  219,  220,  221,  222,  223,
      224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
      234,  234,  234,  234,  235,  236,  236,  237,  238,  240,
      241,  242,  243,  244,  245,  246,  247,  248,  249,  250,
      252,  254,  255,  257,  258,  259,  260,  261,  262,  263,
      264,  265,  266,  267,  268,  269,  270,  271,  273,  274,
      276,  278,  279,  280,  281,  282,  283,  284,  285,  286,
      287,  288,  289,  290,  291,  292,  294,  295,  296,  297,

      298,  299,  300,  301,  302,  304,  305,  306,  307,  309,
      310,  311,  312,  313,  315,  316,  318,  319,  321,  322,
      323,  324,  325,  327,  328,  329,  330,  331,  332,  333,
      334,  335,  336,  337,  338,  339,  340,  341,  343,  344,
      345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
      355,  356,  357,  359,  360,  361,  362,  363,  364,  365,
      367,  368,  370,  371,  372,  373,  374,  375,  376,  377,
      379,  380,  380,  380,  380,  382,  383,  384,  386,  387,
      388,  389,  390,  391,  392,  393,  394,  395,  396,  398,
      399,  401,  402,  403,  404,  407,  408,  411,  413,  414,

      416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
      426,  427,  429,  431,  432,  433,  434,  435,  436,  437,
      438,  440,  441,  443,  444,  445,  446,  447,  448,  449,
      450,  451,  452,  453,  455,  456,  457,  458,  459,  460,
      461,  462,  463,  465,  466,  468,  469,  471,  472,  473,
      474,  475,  477,  478,  479,  481,  482,  483,  484,  485,
      487,  488,  489,  490,  491,  492,  494,  495,  496,  497,
      498,  499,  500,  502,  503,  504,  505,  506,  507,  508,
      509,  510,  511,  512,  513,  515,  517,  518,  519,  520,
      521,  522,  523,  524,  525,  526,  527,  528,  530,  531,

      532,  534,  535,  537,  538,  539,  539,  540,  542,  544,
      546,  547,  548,  549,  550,  551,  552,  553,  555,  556,
      557,  558,  559,  560,  562,  563,  565,  567,  568,  569,
      571,  573,  575,  577,  578,  579,  580,  581,  582,  583,
      584,  585,  586,  588,  589,  590,  592,  593,  594,  595,
      596,  597,  598,  599,  600,  602,  604,  605,  606,  607,
      608,  609,  610,  611,  612,  613,  615,  617,  619,  620,
      621,  622,  623,  624,  625,  626,  627,  628,  629,  630,
      632,  633,  635,  636,  637,  638,  639,  641,  642,  643,
      644,  645,  646,  648,  649,  650,  652,  653,  654,  655,

      656,  657,  658,  660,  661,  662,  663,  664,  666,  667,
      668,  669,  670,  672,  674,  675,  676,  678,  680,  681,
      682,  683,  685,  686,  688,  689,  690,  691,  692,  693,
      694,  695,  696,  697,  698,  700,  702,  704,  706,  707,
      708,  709,  710,  711,  712,  713,  714,  715,  716,  718,
      720,  721,  723,  724,  726,  727,  728,  730,  732,  733,
      735,  736,  738,  739,  740,  742,  743,  745,  746,  748,
      749,  751,  752,  753,  755,  757,  758,  759,  761,  762,
      764,  765,  766,  767,  768,  769,  770,  771,  773,  774,
      775,  776,  777,  779,  781,  782,  784,  786,  788,  789,

      791,  793,  795,  796,  797,  798,  800,  801,  802,  804,
      805,  807,  808,  809,  810,  811,  813,  814,  816,  817,
      818,  819,  820,  821,  823,  825,  827,  828,  829,  830,
      831,  832,  833,  835,  836,  838,  840,  841,  842,  843,
      844,  845,  847,  849,  851,  852,  853,  855,  856,  857,
      859,  860,  861,  862,  863,  864,  866,  868,  869,  870,
      871,  872,  874,  875,  876,  877,  878,  879,  880,  881,
      882,  884,  885,  886,  888,  889,  891,  892,  894,  896,
      897,  898,  900,  902,  904,  905,  906,  908,  910,  912,
      913,  914,  915,  916,  918,  920,  922,  923,  924,  925,

      926,  928,  929,  931,  933,  934,  936,  938,  939,  940,
      942,  944,  945,  946,  948,  949,  951,  952,  953,  955,
      957,  959,  961,  962,  963,  964,  966,  967,  968,  969,
      971,  972,  973,  975,  977,  979,  980,  981,  982,  983,
      984,  985,  987,  989,  990,  992,  993,  995,  997,  999,
     1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
     1012, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1024,
     1026, 1028, 1029, 1031, 1032, 1033, 1035, 1035
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    1,    1,    1,    6,    7,
        8,    9,   10,   11,   10,   12,   13,   14,   15,   16,
       17,   18,   14,   19,   14,   20,   14,   21,   22,   23,
       24,   25,    1,    1,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   35,   36,   37,   38,   39,   40,
       35,   41,   42,   43,   44,   35,   35,   35,   35,   35,
       45,    1,   46,    1,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   10,   75,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    3,    3,    3,    3,    3,    3,    3,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    1,    1
    } ;

static yyconst short int yy_base[784] =
    {   0,
        0,    0,  892,  893,   74,   77,   79,   80,  893,  893,
       73,  893,   85,   85,  893,  893,  893,  893,  893,    0,
      861,  852,  863,  847,  893,  893,  840,   57,   52,   71,
       59,   68,   84,   48,   75,  838,   47,   94,   99,   85,
      106,  111,  113,  105,  112,  110,  132,  823,  828,  893,
      893,  187,  181,  893,  893,  173,  180,  192,    0,  197,
      208,    0,  851,  853,  845,  836,  202,  813,  147,  827,
      823,   78,  809,  141,  813,  822,  806,   46,  824,  145,
      159,  808,  184,  802,  808,  179,  178,  197,  809,  806,
      804,  800,  808,  802,  800,  794,    0,  797,  191,    0,

      790,  798,  796,  793,  804,  787,  188,  181,  794,  169,
      793,  201,  804,  783,  204,  200,  800,  792,  215,  208,
      785,   91,  194,  783,  789,  783,  783,  209,  215,  779,
      229,  221,  776,  775,  230,  784,  238,  771,  772,  784,
      826,  284,  821,    0,  284,  291,  301,  799,    0,  790,
      801,  794,  795,  794,  793,  796,  799,  757,  230,    0,
      776,  756,    0,  769,  758,  771,  264,  759,  769,  764,
      763,  764,  748,  746,  750,  747,  225,  762,  749,  759,
      754,  756,  756,  750,  271,  277,  734,  741,  748,  749,
      263,  746,  731,  748,  747,  742,  741,  742,  742,  728,

      270,  730,  732,  720,  320,  738,  736,  730,    0,  715,
      734,  729,  724,    0,  712,    0,  707,  730,  717,  710,
      718,  721,    0,  714,  705,  273,  703,  710,  702,  705,
      710,  704,  696,  713,  273,  709,  693,    0,  695,  698,
      706,  690,  288,  704,  688,  704,  690,  691,  685,  293,
      689,  697,    0,  696,  695,  684,  693,  688,  687,    0,
      681,    0,  674,  689,  691,  690,  676,  677,  680,  687,
      674,  337,  339,  340,  893,  694,  701,    0,  704,  688,
      692,  689,  683,  688,  659,  657,  661,  669,    0,  655,
        0,  654,  657,  652,  664,  657,    0,    0,  659,  342,

      647,  660,  652,  643,  653,  641,  303,  639,  639,  646,
      644,    0,  647,  649,  649,  638,  646,  628,  642,  631,
        0,  632,    0,  638,  628,  293,  640,  632,  623,  641,
      627,  620,  638,    0,  633,  619,  615,  621,  633,  661,
      663,  660,    0,  612,    0,  625,    0,  616,  625,  607,
      603,    0,  621,  618,  606,  620,  605,  602,  617,    0,
      597,  615,  309,  606,  609,    0,  594,  592,  308,  590,
      585,  591,    0,  603,  587,  601,  590,  595,   35,  600,
      584,  598,  592,  587,    0,    0,  597,  574,  577,  312,
      589,  580,  574,  585,  579,  583,  568,    0,  568,  569,

        0,  581,    0,  580,  580,  353,  893,  617,    0,    0,
      587,  581,  597,  596,  592,  594,  575,    0,  317,  558,
      554,  548,  568,    0,  570,    0,    0,  598,  600,    0,
        0,    0,  157,  554,  542,  548,  540,  552,  558,  557,
      552,  554,    0,  556,  540,    0,  548,  547,  550,  534,
      550,  532,  547,  536,  537,    0,  545,  543,  537,  533,
      531,  523,  538,  536,  526,    0,    0,    0,  533,  537,
      532,  524,  519,  529,  528,  515,  511,  510,  515,    0,
      521,    0,  507,  523,  522,  521,    0,  503,  517,  502,
      502,  514,    0,  504,  503,    0,  512,  509,  511,  493,

      505,  491,    0,  502,  491,  507,  503,  487,  496,  499,
      499,  501,    0,    0,  482,  486,    0,    0,  498,  489,
      497,    0,  479,    0,  529,  499,  493,  492,  491,  498,
      494,  485,  468,  480,    0,    0,    0,    0,  471,  484,
      483,  479,  457,  459,  463,  473,  461,  456,    0,    0,
      472,    0,  462,  468,  452,  459,    0,    0,  461,    0,
      450,    0,  443,  459,    0,  451,    0,  460,    0,  459,
        0,  460,  461,    0,    0,  456,  459,    0,  443,    0,
      440,  442,  455,  450,  449,  433,  437,    0,  446,  432,
      429,  443,    0,    0,  444,    0,    0,  446,  439,    0,

        0,    0,  429,  423,  442,    0,  436,  434,    0,  426,
        0,  433,  425,  424,  415,    0,  434,    0,  433,  432,
      449,  437,  409,    0,    0,    0,  408,  407,  425,  409,
      419,  418,    0,  417,    0,  421,  419,  418,  415,  412,
      396,    0,    0,    0,  401,  400,    0,  408,  409,    0,
      408,  390,  452,  390,  395,    0,    0,  401,  393,  386,
      387,  402,  397,  395,  319,  383,  384,  392,  384,  381,
        0,  389,  389,    0,  387,    0,  391,    0,    0,  390,
      410,    0,    0,    0,  369,  369,    0,    0,    0,  383,
      367,  381,  375,    0,    0,    0,  362,  366,  375,  374,

        0,  893,    0,    0,  374,    0,    0,  359,  364,    0,
        0,  356,  373,    0,  364,    0,  357,  351,    0,    0,
        0,    0,  370,  388,  348,    0,  366,  361,  357,    0,
      345,  357,    0,    0,    0,  357,  356,  341,  340,  332,
      354,    0,    0,  373,    0,  336,    0,    0,    0,    0,
      334,  339,  347,  331,  345,  348,  348,  323,   73,    0,
      110,    0,  225,  254,  277,    0,  281,  307,    0,    0,
        0,  327,    0,  310,  310,    0,  893,  379,  382,  375,
      385,  388,  391
    } ;

static yyconst short int yy_def[784] =
    {   0,
      777,    1,  777,  777,  777,  777,  778,  779,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  780,
      780,  780,  780,  780,  777,  777,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  777,
      777,  777,  778,  777,  777,  779,  777,  781,  782,  777,
      777,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,

      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      781,  783,  777,  782,  777,  777,  777,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,

      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  783,  781,  781,  777,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,

      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,

      780,  780,  780,  780,  780,  781,  777,  777,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,

      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  777,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,

      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,

      780,  777,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,    0,  777,  777,  777,
      777,  777,  777
    } ;

static yyconst short int yy_nxt[969] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,    4,   11,
       12,    4,   13,   14,   14,   14,   14,   14,   14,   14,
       15,   16,   17,   18,   19,   20,   21,   20,   20,   22,
       23,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   24,   20,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   20,   35,   36,   20,   37,   38,
       39,   40,   41,   20,   42,   43,   44,   45,   46,   47,
       48,   49,   20,   50,   51,   52,   52,   52,   52,   52,
       52,   54,   54,   55,  500,   55,   57,   57,   57,   57,
       57,   57,   57,   58,  102,  501,   60,   59,   57,   57,

       57,   57,   57,   57,   57,   68,   95,   74,  103,   96,
       83,  171,  172,   75,   61,   69,   76,   70,   78,  767,
       84,   71,   72,   77,   73,   79,   86,   97,   87,   80,
       85,   89,   81,   82,   98,   99,   61,  163,   88,   90,
      100,  104,   91,  164,  240,   92,  107,  112,   93,  113,
      108,   94,  114,  115,  109,  105,  127,  133,  118,  128,
      110,  106,  119,  241,  120,  134,  111,  121,  122,  129,
      116,  135,  131,  117,  768,   54,  130,  132,   55,  123,
      124,  136,  125,   54,  126,   55,  137,  138,   52,   52,
       52,   60,  174,   57,   57,   57,   57,   57,   57,   57,

      142,  166,  159,  542,  143,  160,  175,  167,  543,   61,
      145,  145,  145,  145,  145,  145,  145,  146,  176,  177,
      217,  147,  147,  147,  147,  147,  147,  147,  186,  152,
      153,   61,  154,  179,  184,  218,  180,  155,  156,  157,
      202,  242,  181,  187,  185,  188,  189,  212,  190,  203,
      214,  215,  220,  224,  213,  226,  204,  205,  243,  191,
      248,  227,  251,  192,  249,  230,  236,  221,  231,  225,
      232,  237,  260,  250,  238,  769,  261,  286,  233,  255,
      234,  235,  252,  287,  256,  264,  253,  257,  265,  267,
      304,  305,  274,  268,  258,  259,  275,  145,  145,  145,

      145,  145,  145,  145,  147,  147,  147,  147,  147,  147,
      147,  293,  770,   61,  147,  147,  147,  147,  147,  147,
      147,  324,  313,  771,  325,  294,  314,  315,  335,  316,
      772,  336,  317,  361,  340,   61,  341,  371,  342,  343,
      372,  362,  318,  379,  387,  406,  319,  272,  142,  407,
      436,  143,  408,  453,  388,  380,  428,  454,  429,  490,
      484,  272,  510,  491,  533,  525,  712,  511,  713,  437,
      485,  344,  512,  773,  774,  775,  776,   62,  534,   53,
       53,   53,   56,   56,   56,  141,  141,  141,  144,  766,
      144,  273,  273,  273,  765,  764,  763,  762,  761,  760,

      759,  758,  757,  756,  755,  754,  753,  752,  751,  750,
      749,  748,  747,  746,  745,  744,  743,  742,  741,  740,
      739,  738,  737,  736,  735,  734,  733,  732,  731,  730,
      729,  728,  727,  726,  725,  724,  723,  722,  721,  720,
      719,  718,  717,  716,  715,  714,  711,  710,  709,  708,
      707,  706,  705,  704,  703,  702,  701,  700,  699,  698,
      697,  696,  695,  694,  693,  692,  691,  690,  689,  688,
      687,  686,  685,  684,  683,  682,  681,  680,  679,  678,
      677,  676,  675,  674,  673,  672,  671,  670,  669,  668,
      667,  666,  665,  664,  663,  662,  661,  660,  659,  658,

      657,  656,  655,  654,  653,  652,  651,  650,  649,  648,
      647,  646,  645,  644,  643,  642,  641,  640,  639,  638,
      637,  636,  635,  634,  633,  632,  631,  630,  629,  628,
      627,  626,  625,  624,  623,  622,  621,  620,  619,  618,
      617,  273,  616,  615,  614,  613,  612,  611,  610,  609,
      608,  607,  606,  605,  604,  603,  602,  601,  600,  599,
      598,  597,  596,  595,  594,  593,  592,  591,  590,  589,
      588,  587,  586,  585,  584,  583,  582,  581,  580,  579,
      578,  577,  576,  575,  574,  573,  572,  571,  570,  569,
      568,  567,  566,  565,  564,  563,  562,  561,  560,  559,

      558,  557,  556,  555,  554,  553,  552,  551,  550,  549,
      548,  547,  546,  545,  544,  541,  540,  539,  538,  537,
      536,  535,  532,  531,  530,  529,  528,  527,  526,  273,
      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
      514,  513,  509,  508,  507,  506,  505,  504,  503,  502,
      499,  498,  497,  496,  495,  494,  493,  492,  489,  488,
      487,  486,  483,  482,  481,  480,  479,  478,  477,  476,
      475,  474,  473,  472,  471,  470,  469,  468,  467,  466,
      465,  464,  463,  462,  461,  460,  459,  458,  457,  456,
      455,  410,  452,  451,  450,  449,  448,  447,  446,  445,

      444,  443,  442,  441,  440,  439,  438,  435,  434,  433,
      432,  431,  430,  427,  426,  425,  424,  423,  422,  421,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  405,  404,  403,  402,  401,  400,  399,  398,
      397,  396,  395,  394,  393,  392,  391,  390,  278,  389,
      386,  385,  384,  383,  382,  381,  378,  377,  376,  375,
      374,  373,  370,  369,  368,  367,  366,  365,  364,  363,
      360,  359,  358,  357,  356,  355,  354,  353,  352,  351,
      350,  349,  348,  347,  346,  345,  339,  338,  337,  334,
      333,  332,  331,  330,  329,  328,  327,  326,  323,  322,

      321,  320,  312,  311,  310,  309,  308,  307,  306,  303,
      302,  301,  300,  299,  298,  297,  296,  295,  292,  291,
      290,  289,  288,  285,  284,  283,  282,  281,  280,  279,
      278,  277,  276,  273,  272,  271,  270,  269,  266,  263,
      262,  254,  247,  246,  245,  244,  239,  229,  228,  223,
      222,  219,  216,  211,  210,  209,  208,  207,  206,  201,
      200,  199,  198,  197,  196,  195,  194,  193,  183,  182,
      178,  173,  170,  169,  168,  165,  162,  161,  158,  151,
      150,  149,  148,  140,  139,  101,   67,   66,   65,   64,
       63,  777,    3,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777
    } ;

static yyconst short int yy_chk[969] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    5,    5,    6,    6,
        6,    7,    8,    7,  379,    8,   11,   11,   11,   11,
       11,   11,   11,   13,   37,  379,   14,   13,   14,   14,

       14,   14,   14,   14,   14,   28,   34,   29,   37,   34,
       31,   78,   78,   29,   14,   28,   29,   28,   30,  759,
       31,   28,   28,   29,   28,   30,   32,   35,   32,   30,
       31,   33,   30,   30,   35,   35,   14,   72,   32,   33,
       35,   38,   33,   72,  122,   33,   39,   40,   33,   40,
       39,   33,   40,   41,   39,   38,   44,   46,   42,   44,
       39,   38,   42,  122,   43,   46,   39,   43,   43,   44,
       41,   46,   45,   41,  761,   56,   44,   45,   56,   43,
       43,   47,   43,   53,   43,   53,   47,   47,   52,   52,
       52,   57,   80,   57,   57,   57,   57,   57,   57,   57,

       58,   74,   69,  433,   58,   69,   80,   74,  433,   57,
       60,   60,   60,   60,   60,   60,   60,   61,   81,   81,
      110,   61,   61,   61,   61,   61,   61,   61,   87,   67,
       67,   57,   67,   83,   86,  110,   83,   67,   67,   67,
       99,  123,   83,   87,   86,   87,   88,  107,   88,   99,
      108,  108,  112,  115,  107,  116,   99,   99,  123,   88,
      128,  116,  129,   88,  128,  119,  120,  112,  119,  115,
      119,  120,  132,  128,  120,  763,  132,  159,  119,  131,
      119,  119,  129,  159,  131,  135,  129,  131,  135,  137,
      177,  177,  142,  137,  131,  131,  142,  145,  145,  145,

      145,  145,  145,  145,  146,  146,  146,  146,  146,  146,
      146,  167,  764,  145,  147,  147,  147,  147,  147,  147,
      147,  191,  185,  765,  191,  167,  185,  186,  201,  186,
      767,  201,  186,  226,  205,  145,  205,  235,  205,  205,
      235,  226,  186,  243,  250,  272,  186,  273,  274,  272,
      307,  273,  274,  326,  250,  243,  300,  326,  300,  369,
      363,  406,  390,  369,  419,  406,  665,  390,  665,  307,
      363,  205,  390,  768,  772,  774,  775,  780,  419,  778,
      778,  778,  779,  779,  779,  781,  781,  781,  782,  758,
      782,  783,  783,  783,  757,  756,  755,  754,  753,  752,

      751,  746,  744,  741,  740,  739,  738,  737,  736,  732,
      731,  729,  728,  727,  725,  724,  723,  718,  717,  715,
      713,  712,  709,  708,  705,  700,  699,  698,  697,  693,
      692,  691,  690,  686,  685,  681,  680,  677,  675,  673,
      672,  670,  669,  668,  667,  666,  664,  663,  662,  661,
      660,  659,  658,  655,  654,  653,  652,  651,  649,  648,
      646,  645,  641,  640,  639,  638,  637,  636,  634,  632,
      631,  630,  629,  628,  627,  623,  622,  621,  620,  619,
      617,  615,  614,  613,  612,  610,  608,  607,  605,  604,
      603,  599,  598,  595,  592,  591,  590,  589,  587,  586,

      585,  584,  583,  582,  581,  579,  577,  576,  573,  572,
      570,  568,  566,  564,  563,  561,  559,  556,  555,  554,
      553,  551,  548,  547,  546,  545,  544,  543,  542,  541,
      540,  539,  534,  533,  532,  531,  530,  529,  528,  527,
      526,  525,  523,  521,  520,  519,  516,  515,  512,  511,
      510,  509,  508,  507,  506,  505,  504,  502,  501,  500,
      499,  498,  497,  495,  494,  492,  491,  490,  489,  488,
      486,  485,  484,  483,  481,  479,  478,  477,  476,  475,
      474,  473,  472,  471,  470,  469,  465,  464,  463,  462,
      461,  460,  459,  458,  457,  455,  454,  453,  452,  451,

      450,  449,  448,  447,  445,  444,  442,  441,  440,  439,
      438,  437,  436,  435,  434,  429,  428,  425,  423,  422,
      421,  420,  417,  416,  415,  414,  413,  412,  411,  408,
      405,  404,  402,  400,  399,  397,  396,  395,  394,  393,
      392,  391,  389,  388,  387,  384,  383,  382,  381,  380,
      378,  377,  376,  375,  374,  372,  371,  370,  368,  367,
      365,  364,  362,  361,  359,  358,  357,  356,  355,  354,
      353,  351,  350,  349,  348,  346,  344,  342,  341,  340,
      339,  338,  337,  336,  335,  333,  332,  331,  330,  329,
      328,  327,  325,  324,  322,  320,  319,  318,  317,  316,

      315,  314,  313,  311,  310,  309,  308,  306,  305,  304,
      303,  302,  301,  299,  296,  295,  294,  293,  292,  290,
      288,  287,  286,  285,  284,  283,  282,  281,  280,  279,
      277,  276,  271,  270,  269,  268,  267,  266,  265,  264,
      263,  261,  259,  258,  257,  256,  255,  254,  252,  251,
      249,  248,  247,  246,  245,  244,  242,  241,  240,  239,
      237,  236,  234,  233,  232,  231,  230,  229,  228,  227,
      225,  224,  222,  221,  220,  219,  218,  217,  215,  213,
      212,  211,  210,  208,  207,  206,  204,  203,  202,  200,
      199,  198,  197,  196,  195,  194,  193,  192,  190,  189,

      188,  187,  184,  183,  182,  181,  180,  179,  178,  176,
      175,  174,  173,  172,  171,  170,  169,  168,  166,  165,
      164,  162,  161,  158,  157,  156,  155,  154,  153,  152,
      151,  150,  148,  143,  141,  140,  139,  138,  136,  134,
      133,  130,  127,  126,  125,  124,  121,  118,  117,  114,
      113,  111,  109,  106,  105,  104,  103,  102,  101,   98,
       96,   95,   94,   93,   92,   91,   90,   89,   85,   84,
       82,   79,   77,   76,   75,   73,   71,   70,   68,   66,
       65,   64,   63,   49,   48,   36,   27,   24,   23,   22,
       21,    3,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scaner.l"
#define INITIAL 0
#line 2 "scaner.l"
#include <string>
#include "common.h"
#include "grammar.tab.h"

int yycolumn = 1;

#define YY_NO_UNPUT 1
#line 971 "scaner.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 25 "scaner.l"


#line 1125 "scaner.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 778 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 893 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 27 "scaner.l"
{ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 28 "scaner.l"
{ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 29 "scaner.l"
{ }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 30 "scaner.l"
{ }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 32 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }			
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 33 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 34 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 35 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 36 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }			
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 37 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }			
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 38 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 39 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 40 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 41 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 42 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 43 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 44 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 45 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 46 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 47 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 48 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 49 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 50 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 51 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 52 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 53 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 54 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 55 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 56 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 57 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 58 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 59 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 60 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 61 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 62 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }			
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 63 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 64 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 65 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 66 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 67 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 68 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 69 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 70 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 71 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 72 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 73 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 74 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 75 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 76 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }			
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 77 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 78 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 79 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 80 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 81 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 82 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }			
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 83 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 84 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }			
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 85 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 86 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 87 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 88 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 89 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 90 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 91 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 92 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 93 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 94 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 95 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 96 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 97 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 98 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 99 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 100 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 101 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 102 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 103 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 104 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }			
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 105 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 106 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 107 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }			
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 108 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 109 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 110 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 111 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 112 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 113 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 114 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 115 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 116 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 117 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 118 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 119 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 120 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 121 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 122 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 123 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 124 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 125 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 126 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 127 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 128 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 129 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 130 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 131 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 132 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 133 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 134 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 135 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 136 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 137 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 138 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 139 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }			
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 140 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 141 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }			
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 142 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 143 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 144 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 145 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 146 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 147 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 148 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 149 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 150 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 151 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }			
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 152 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }			
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 153 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 154 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 155 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 156 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }			
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 157 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 158 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 159 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 160 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }			
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 161 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 162 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 163 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 164 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 165 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 166 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 167 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 168 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 169 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 170 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 171 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 172 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 173 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 174 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 175 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 176 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 177 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 178 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 179 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 180 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 181 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 182 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }		
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 183 "scaner.l"
{myerror("%s: %d: error: reserved word: %s", g_cur_bidl_file_name.c_str(), yylineno, yytext); }	
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 185 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_BOOLEAN;
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 195 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_INT8;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 205 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_INT16;
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 215 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_INT32;
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 225 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_INT64;
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 235 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_FLOAT;

	//"double" {
	//
	//	yylloc.first_line = yylloc.last_line = yylineno;
	//	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	//	yycolumn += yyleng;
	//
	//	yylval.szstr = strdup(yytext);
	//	return TOKEN_DOUBLE;
	//}
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 255 "scaner.l"
{ 
	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_STRING;
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 264 "scaner.l"
{ 
	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_BINARY;
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 273 "scaner.l"
{ 
	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_MAP;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 282 "scaner.l"
{ 
	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_SET;
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 291 "scaner.l"
{ 
	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_SEQUENCE;
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 300 "scaner.l"
{ 
	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_ENUM;
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 309 "scaner.l"
{ 
	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_STRUCT;
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 318 "scaner.l"
{ 
	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_CLASS;
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 327 "scaner.l"
{ 
	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_NAMESPACE;
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 336 "scaner.l"
{
	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.boolval = true;
	return TOKEN_BOOLVAL;
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 345 "scaner.l"
{
	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.boolval = false;
	return TOKEN_BOOLVAL;
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 354 "scaner.l"
{ 

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_INCLUDE;
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 364 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_TYPEDEF;
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 374 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_CONST;
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 384 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_IN;
}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 394 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_OUT;
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 404 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_ALL;
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 414 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_VOID;
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 424 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_EQ;
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 434 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_COLON;
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 444 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_SEMICOLON;
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 454 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_COMMA;
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 464 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_MORE;
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 474 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_LESS;
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 484 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_LEFT_CURLY_BRACKET;
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 494 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_RIGHT_CURLY_BRACKET;
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 504 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_LEFT_BRACKET;
}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 514 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_RIGHT_BRACKET;
}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 524 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_LEFT_SQUARE_BRACKET;
}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 534 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_RIGHT_SQUARE_BRACKET;
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 544 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_IDENTIFIER;
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 554 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_INTEGER;
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 564 "scaner.l"
{

	yylloc.first_line = yylloc.last_line = yylineno;
	yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1;
	yycolumn += yyleng;

	yylval.szstr = strdup(yytext);
	return TOKEN_DECIMAL;
}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 574 "scaner.l"
{
	std::string tmp(yytext+1, yyleng-2);
	yylval.szstr = strdup(tmp.c_str());
	return TOKEN_LITERAL;
}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 581 "scaner.l"
{
	myerror("invalid string: `%s'", yytext);
}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 585 "scaner.l"
{ myerror("unexpected char `%s'", yytext); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 587 "scaner.l"
ECHO;
	YY_BREAK
#line 2528 "scaner.c"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 778 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 778 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 777);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 587 "scaner.l"

